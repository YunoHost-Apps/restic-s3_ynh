#!/bin/bash

LOCK_FILE=/tmp/__APP__-backup.lock
EXIT_PROPERLY() {
  echo -e "\e[91m \e[1m"    # Shell in light red bold
  echo -e "!!\n  Caught an interruption signal,  removing lock file...\n!!"
  echo -e "\e[22m"    # Remove bold

  rm $LOCK_FILE
  exit 1
}
trap EXIT_PROPERLY 1 2 3 6 15
if [ -f "$LOCK_FILE" ];then
  pid=$(grep '.*' $LOCK_FILE)
  if ps -p $pid > /dev/null; then
    echo "Backup already launched by process $pid, canceling this one..." >&2
    exit 75
  else
    echo "Lockfile is present but process $pid is not here! Please run again..." >&2
    exit 1
  fi
fi
echo $$ > "$LOCK_FILE"

filter_hooks() {
  ls /usr/share/yunohost/hooks/backup/ /etc/yunohost/hooks.d/backup/ | grep "\-$1_" | cut -d"-" -f2 | uniq
}

# Backup system part conf
conf=$(sudo yunohost app setting __APP__ conf)
if [ $conf -eq 1 ];then
  sudo yunohost backup create -n auto_conf --method __APP__ --system $(filter_hooks conf)
fi

# Backup system data
data=$(sudo yunohost app setting __APP__ data)
if [ $data -eq 1 ];then
  sudo yunohost backup create -n auto_data --method __APP__ --system $(filter_hooks data)
fi

# Backup all apps independently
apps=$(sudo yunohost app setting __APP__ apps)
for app in $(sudo /usr/bin/find /etc/yunohost/apps -name backup | cut -d / -f 5); do
  # Filter apps to backup
  backup_app=false
  for selected_app in $(echo $apps | tr "," " ");do
    if [[ "$selected_app" == "$app" ]] || [ "$apps" = "all" ]; then
      backup_app=true
      break
    fi
  done

  if [ "$backup_app" == "true" ];then
    sudo yunohost backup create -n auto_$app --method __APP__ --apps $app
  fi
done

rm "$LOCK_FILE"
